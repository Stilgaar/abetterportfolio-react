@use "sass:math";

$grid-columns: 12;
$grid-gaps: (
  "0": 0,
  "1": 10px,
  "2": 20px,
  "3": 30px,
);

$layout-values: flex-start, flex-end, center, space-between, space-around,
  space-evenly;

// mise en place de base

@mixin container() {
  width: 100%;
  margin: 0 auto;
  padding: 0 20px;
  box-sizing: border-box;
}
.container {
  @include container;
  max-width: 1200px;
}
.container-lg {
  @include container;
  max-width: 900px;
}
.container-card {
  @include container;
  max-width: 300px;
  min-height: 500px;
}
.container-form {
  @include container;
  min-height: 700px;
}
.container-acc {
  @include container;
  min-height: 60vh;
}
.container-comp {
  @include container;
  max-width: 200px;
}

.row {
  display: flex;
  flex-flow: row wrap;
}

// espaces entre les grids
@each $key, $val in $grid-gaps {
  .gap-#{$key} > * {
    padding: $val;
  }
  .gap-#{$key} {
    margin-left: -$val;
    margin-right: -$val;
  }
}

// classes de justify content
@each $val in $layout-values {
  .justify-#{$val} {
    justify-content: $val;
  }
}

// classes de colonnes (en fonction des mixins de breakpoints par ex .col-xs-12)

@include xs {
  @for $i from 1 through $grid-columns {
    .col-#{$i}-xs {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i * 100%, $grid-columns);
    }
  }
}

@include sm {
  @for $i from 1 through $grid-columns {
    .col-#{$i}-sm {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i * 100%, $grid-columns);
    }
  }
}

@include md {
  @for $i from 1 through $grid-columns {
    .col-#{$i}-md {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i * 100%, $grid-columns);
    }
  }
}

@include lg {
  @for $i from 1 through $grid-columns {
    .col-#{$i}-lg {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i * 100%, $grid-columns);
    }
  }
}

@include xl {
  @for $i from 1 through $grid-columns {
    .col-#{$i}-xl {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i * 100%, $grid-columns);
    }
  }
}

@include breakpoint(2000px) {
  @for $i from 1 through $grid-columns {
    .col-#{$i}-bp {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i * 100%, $grid-columns);
    }
  }
}

.form-marg-l {
  @include xs {
    margin: 0;
  }
  @include sm {
    margin: 0;
  }
  @include md {
    margin: 0;
  }
  @include lg {
    margin-top: $base-margin * 2;
  }
  @include xl {
    margin-top: $base-margin * 8;
  }
  @include breakpoint(1400px) {
    margin-top: $base-margin * 10;
  }
}

.form-marg-r {
  @include xs {
    margin: 0;
  }
  @include sm {
    margin: 0;
  }
  @include md {
    margin: 0;
  }
  @include lg {
    margin-bottom: $base-margin * 2;
  }
  @include xl {
    margin-bottom: $base-margin * 8;
  }
  @include breakpoint(1400px) {
    margin-bottom: $base-margin * 10;
  }
}

.img-thumb {
  @include xs {
    height: 150px;
  }
  @include sm {
    height: 150px;
  }
  @include md {
    height: 200px;
  }
  @include lg {
    height: 150px;
  }
  @include xl {
    height: 150px;
  }
  @include breakpoint(1400px) {
    height: 250px;
  }
}
